trtsel <-
function(disease, trt, marker, thresh=0, study.design = "randomized cohort", cohort.attributes = NULL, marker.bounds = NULL, link = "logit", allow.switch=TRUE){



  ## Error Checking
  
  #check disease
  if(!is.numeric(disease) | !all(is.element(unique(disease), c(0,1)))) stop( "disease must be a numeric vector with elements 1 or 0")
 
  if(!is.element(link, c("logit", "probit", "cauchit", "log", "cloglog"))) stop("link must be one of ''logit'', ''probit'', ''cauchit'', ''log'', ''cloglog''")

  if(!is.numeric(trt) | !all(is.element(unique(trt), c(0,1)))) stop( "trt must be a numeric vector with elements 1 or 0") 
  
  if(!is.numeric(marker)) stop( "marker must be a numeric vector") 
  if(length(dim(marker)) >0){  if(dim(marker)[2]==1){ marker = c(marker);}else{ stop("only a single marker is allowed, ''marker'' must be a numeric vector of same length as trt and disease")}}
  if(!is.vector(marker)) stop("only a single marker is allowed, ''marker'' must be a numeric vector of same length as trt and disease")
  if((length(disease) != length(trt)) | (length(trt) != length(marker))) stop("disease, trt, and marker must be vectors of the same length")

  ## End Error Checking

  d <- thresh
#find out which bootstrapping functions to use based on type
  if( substr(study.design,1,4)  == "rand" ) { 
   
    boot.sample <- boot.sample.cohort 
    get.F <- get.F.cohort
    get.summary.measures <- get.summary.measures.cohort

    if(length(cohort.attributes) >0) warning("study.design = ''randomized cohort'', but cohort.attributes assigned: cohort.attributes will be ignored"); cohort.attributes=NULL;
     #just passing null value here 
    

  }else if( substr(study.design, 1, 4) =="nest") { 
    
    if(link!="logit") warning("when study.design is ''nested case-control'' only link=''logit'' is allowed, setting link = ''logit''"); link = "logit"
    boot.sample <- boot.sample.case.control 
    get.F <- get.F.case.control
    get.summary.measures <- get.summary.measures.case.control

    if(length(cohort.attributes) != 4){ 
    
    stop("cohort.attributes not specified correctly, when study.design=''nested case-control'': \n  
          cohort.attributes = c(cohort sample size, 
          proportion treated in cohort (Pr(trt==1)),
          disease prevalance in cohort (Pr(disease==1)),
          fraction of cases sampled from cohort)\n")
    }

    if(length(trt) > cohort.attributes[1]) stop("Sub-cohort sample size larger than input cohort sample size, please check cohort.attributes[1]")

    if( any(cohort.attributes[-1]<0 ) | any(cohort.attributes[-1] > 1)) stop("Probabilities in cohort.attributes are not in (0,1), please check cohort.attributes")

   # if(length(cohort.attributes) == 3) cohort.attributes <- c(cohort.attributes, 1) # adding f = 1 by default
    #cohort attributes is c(N, Pr(trt = 1), Pr(disease = 1) ) 

  }
  else if( substr(study.design, 1, 5) =="strat") { 
    if(link!="logit") warning("when study.design is ''stratified nested case-control'' only link=''logit'' is allowed, setting link = ''logit''"); link = "logit"
    boot.sample <- boot.sample.stratified.case.control
    get.F <- get.F.stratified.case.control  
    get.summary.measures <- get.summary.measures.stratified.case.control
   # if(length(cohort.attributes) == 5) cohort.attributes <- c(cohort.attributes, 1, 1)
   if(length(cohort.attributes) != 6){ 
    
    stop("cohort.attributes not specified correctly, when study.design=''nested case-control'': \n  
          cohort.attributes = c(cohort sample size, 
                              Pr(trt==0 & disease==0) in cohort, 
                              Pr(trt==0 & disease==1) in cohort, 
                              Pr(trt==1 & disease==0) in cohort, 
                              fraction of cases with trt == 0 sampled from cohort, 
                              fraction of cases with trt == 1 sampled from cohort )\n ")
    }
    ca <- cohort.attributes
    cohort.attributes = c(ca[1], ca[2], ca[3], ca[4], 1-(ca[2]+ca[3]+ca[4]), ca[5], ca[6])


    if(length(trt) > ca[1]) stop("Sub-cohort sample size larger than input cohort sample size, please check cohort.attributes[1]")
    if( any(cohort.attributes[-1]<0) | any(cohort.attributes[-1] > 1)) stop("Probabilities in cohort.attributes are not in (0,1), please check cohort.attributes. \n Is Pr(trt==0 & disease==0) + Pr(trt==0 & disease==1) + Pr(trt==1 & disease==0) > 1?")

  }
  else { stop("study.design not specified correctly, must be one of ''randomized cohort'', ''nested case-control'', or ''stratified nested case-control''") }

  functions <- list("boot.sample" = boot.sample, "get.F" = get.F, "get.summary.measures" = get.summary.measures)

  rho = cohort.attributes

  #make sure Pr(disease = 1 | trt = 1) > Pr(disease = 1 | trt = 0), if not, use T.star = 1-trt and give a warning


  if( mean(disease[trt==1]) > mean(disease[trt==0]) & allow.switch ) {

    warning( "   Function assumes Pr(disease = 1 | trt = 1) < Pr(disease = 1 | trt = 0)\n   Redefining trt <- (1-trt)\n")


    trt <- 1-trt ###Remember to CHANGE THIS BACK FOR THE PACKAGE

  }
  
  # model.fit
  coef <- get.coef( disease, trt, marker, study.design, rho, link)

  model.fit <- list( "coefficients" = coef, "cohort.attributes" = rho, "study.design" = study.design, "marker.bounds" = marker.bounds, "link" = link)
  linkinvfun <- binomial(link = link)$linkinv
  # derived.data

  #now that we allow for different link functions for "randomized cohorts", we need to get the fitted risks directly from the model
  
    fittedrisk.t0 <- get.risk.t0(coef, marker, linkinvfun)
    fittedrisk.t1 <- get.risk.t1(coef, marker, linkinvfun)
  

  trt.effect <- fittedrisk.t0 - fittedrisk.t1
  marker.neg <- ifelse( trt.effect < d, 1, 0) # indicator of being marker negative


  derived.data <- data.frame( disease = disease, trt=trt, marker = marker, 
                                                 fittedrisk.t0 = fittedrisk.t0, 
                                                 fittedrisk.t1 = fittedrisk.t1,
                                                 trt.effect = trt.effect,
                                                 marker.neg = marker.neg)



  out <- list(derived.data=derived.data, model.fit = model.fit, functions  = functions)
  class(out) = "trtsel"
  
  out

}
